/* tslint:disable */
/* eslint-disable */
/**
 * Rentacar
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AppUser
 */
export interface AppUser {
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    normalizedUserName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    normalizedEmail?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AppUser
     */
    emailConfirmed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    passwordHash?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    securityStamp?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    concurrencyStamp?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    phoneNumber?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AppUser
     */
    phoneNumberConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AppUser
     */
    twoFactorEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    lockoutEnd?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AppUser
     */
    lockoutEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AppUser
     */
    accessFailedCount?: number;
}
/**
 * 
 * @export
 * @interface Car
 */
export interface Car {
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    carId: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    macer: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    model: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    kiloMeter: string;
    /**
     * 
     * @type {FuelType}
     * @memberof Car
     */
    fuelType: FuelType;
    /**
     * 
     * @type {Gear}
     * @memberof Car
     */
    gear: Gear;
    /**
     * 
     * @type {CarType}
     * @memberof Car
     */
    carType: CarType;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    color?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    addedUserName?: string | null;
    /**
     * 
     * @type {Array<Order>}
     * @memberof Car
     */
    orders?: Array<Order> | null;
}
/**
 * 
 * @export
 * @interface CarDTO
 */
export interface CarDTO {
    /**
     * 
     * @type {string}
     * @memberof CarDTO
     */
    macer?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CarDTO
     */
    model?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CarDTO
     */
    kiloMeter?: string | null;
    /**
     * 
     * @type {FuelType}
     * @memberof CarDTO
     */
    fuelType?: FuelType;
    /**
     * 
     * @type {Gear}
     * @memberof CarDTO
     */
    gear?: Gear;
    /**
     * 
     * @type {CarType}
     * @memberof CarDTO
     */
    carType?: CarType;
    /**
     * 
     * @type {string}
     * @memberof CarDTO
     */
    color?: string | null;
}
/**
 * 
 * @export
 * @interface CarGetDTO
 */
export interface CarGetDTO {
    /**
     * 
     * @type {string}
     * @memberof CarGetDTO
     */
    carId?: string;
    /**
     * 
     * @type {string}
     * @memberof CarGetDTO
     */
    macer?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CarGetDTO
     */
    model?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CarGetDTO
     */
    kiloMeter?: string | null;
    /**
     * 
     * @type {FuelType}
     * @memberof CarGetDTO
     */
    fuelType?: FuelType;
    /**
     * 
     * @type {Gear}
     * @memberof CarGetDTO
     */
    gear?: Gear;
    /**
     * 
     * @type {CarType}
     * @memberof CarGetDTO
     */
    carType?: CarType;
    /**
     * 
     * @type {string}
     * @memberof CarGetDTO
     */
    color?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum CarType {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5,
    NUMBER_6 = 6
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum FuelType {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum Gear {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3
}

/**
 * 
 * @export
 * @interface LoginDTO
 */
export interface LoginDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginDTO
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginDTO
     */
    password?: string | null;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    orderId: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    carId: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    surName: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    dateOfBirth: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    telephone: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    identificationNumber: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    orderDate: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    receiptDate: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    issuanceDate: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    deliveryAddress: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    note?: string | null;
    /**
     * 
     * @type {Car}
     * @memberof Order
     */
    car?: Car;
}
/**
 * 
 * @export
 * @interface OrderDTO
 */
export interface OrderDTO {
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    carId?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    surName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    dateOfBirth?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    telephone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    identificationNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    orderDate?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    receiptDate?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    issuanceDate?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    deliveryAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    note?: string | null;
}
/**
 * 
 * @export
 * @interface OrderGetDTO
 */
export interface OrderGetDTO {
    /**
     * 
     * @type {string}
     * @memberof OrderGetDTO
     */
    orderId?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderGetDTO
     */
    carId?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderGetDTO
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderGetDTO
     */
    surName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderGetDTO
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderGetDTO
     */
    dateOfBirth?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderGetDTO
     */
    telephone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderGetDTO
     */
    identificationNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderGetDTO
     */
    orderDate?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderGetDTO
     */
    receiptDate?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderGetDTO
     */
    issuanceDate?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderGetDTO
     */
    deliveryAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderGetDTO
     */
    note?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterDTO
 */
export interface RegisterDTO {
    /**
     * 
     * @type {string}
     * @memberof RegisterDTO
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterDTO
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterDTO
     */
    password?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterDTO
     */
    phoneNumber?: string | null;
}
/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    phoneNumber?: string | null;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginDTO} loginDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationLoginPost: async (loginDTO: LoginDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDTO' is not null or undefined
            assertParamExists('authenticationLoginPost', 'loginDTO', loginDTO)
            const localVarPath = `/Authentication/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterDTO} registerDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationRegisterAdminPost: async (registerDTO: RegisterDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerDTO' is not null or undefined
            assertParamExists('authenticationRegisterAdminPost', 'registerDTO', registerDTO)
            const localVarPath = `/Authentication/RegisterAdmin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterDTO} registerDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationRegisterPost: async (registerDTO: RegisterDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerDTO' is not null or undefined
            assertParamExists('authenticationRegisterPost', 'registerDTO', registerDTO)
            const localVarPath = `/Authentication/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginDTO} loginDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationLoginPost(loginDTO: LoginDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationLoginPost(loginDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterDTO} registerDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationRegisterAdminPost(registerDTO: RegisterDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationRegisterAdminPost(registerDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterDTO} registerDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationRegisterPost(registerDTO: RegisterDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationRegisterPost(registerDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginDTO} loginDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationLoginPost(loginDTO: LoginDTO, options?: any): AxiosPromise<void> {
            return localVarFp.authenticationLoginPost(loginDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterDTO} registerDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationRegisterAdminPost(registerDTO: RegisterDTO, options?: any): AxiosPromise<void> {
            return localVarFp.authenticationRegisterAdminPost(registerDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterDTO} registerDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationRegisterPost(registerDTO: RegisterDTO, options?: any): AxiosPromise<void> {
            return localVarFp.authenticationRegisterPost(registerDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @param {LoginDTO} loginDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticationLoginPost(loginDTO: LoginDTO, options?: any) {
        return AuthenticationApiFp(this.configuration).authenticationLoginPost(loginDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterDTO} registerDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticationRegisterAdminPost(registerDTO: RegisterDTO, options?: any) {
        return AuthenticationApiFp(this.configuration).authenticationRegisterAdminPost(registerDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterDTO} registerDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticationRegisterPost(registerDTO: RegisterDTO, options?: any) {
        return AuthenticationApiFp(this.configuration).authenticationRegisterPost(registerDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CarApi - axios parameter creator
 * @export
 */
export const CarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carCarIdDelete: async (carId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            assertParamExists('carCarIdDelete', 'carId', carId)
            const localVarPath = `/Car/{carId}`
                .replace(`{${"carId"}}`, encodeURIComponent(String(carId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carCarIdGet: async (carId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            assertParamExists('carCarIdGet', 'carId', carId)
            const localVarPath = `/Car/{carId}`
                .replace(`{${"carId"}}`, encodeURIComponent(String(carId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} carId 
         * @param {CarDTO} carDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carCarIdPut: async (carId: string, carDTO: CarDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            assertParamExists('carCarIdPut', 'carId', carId)
            // verify required parameter 'carDTO' is not null or undefined
            assertParamExists('carCarIdPut', 'carDTO', carDTO)
            const localVarPath = `/Car/{carId}`
                .replace(`{${"carId"}}`, encodeURIComponent(String(carId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Car`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CarDTO} carDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carPost: async (carDTO: CarDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'carDTO' is not null or undefined
            assertParamExists('carPost', 'carDTO', carDTO)
            const localVarPath = `/Car`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarApi - functional programming interface
 * @export
 */
export const CarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async carCarIdDelete(carId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.carCarIdDelete(carId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async carCarIdGet(carId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.carCarIdGet(carId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} carId 
         * @param {CarDTO} carDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async carCarIdPut(carId: string, carDTO: CarDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.carCarIdPut(carId, carDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async carGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CarGetDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.carGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CarDTO} carDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async carPost(carDTO: CarDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Car>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.carPost(carDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CarApi - factory interface
 * @export
 */
export const CarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarApiFp(configuration)
    return {
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carCarIdDelete(carId: string, options?: any): AxiosPromise<void> {
            return localVarFp.carCarIdDelete(carId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carCarIdGet(carId: string, options?: any): AxiosPromise<void> {
            return localVarFp.carCarIdGet(carId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} carId 
         * @param {CarDTO} carDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carCarIdPut(carId: string, carDTO: CarDTO, options?: any): AxiosPromise<void> {
            return localVarFp.carCarIdPut(carId, carDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carGet(options?: any): AxiosPromise<Array<CarGetDTO>> {
            return localVarFp.carGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarDTO} carDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carPost(carDTO: CarDTO, options?: any): AxiosPromise<Car> {
            return localVarFp.carPost(carDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CarApi - object-oriented interface
 * @export
 * @class CarApi
 * @extends {BaseAPI}
 */
export class CarApi extends BaseAPI {
    /**
     * 
     * @param {string} carId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public carCarIdDelete(carId: string, options?: any) {
        return CarApiFp(this.configuration).carCarIdDelete(carId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} carId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public carCarIdGet(carId: string, options?: any) {
        return CarApiFp(this.configuration).carCarIdGet(carId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} carId 
     * @param {CarDTO} carDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public carCarIdPut(carId: string, carDTO: CarDTO, options?: any) {
        return CarApiFp(this.configuration).carCarIdPut(carId, carDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public carGet(options?: any) {
        return CarApiFp(this.configuration).carGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarDTO} carDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public carPost(carDTO: CarDTO, options?: any) {
        return CarApiFp(this.configuration).carPost(carDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdGet: async (orderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('orderOrderIdGet', 'orderId', orderId)
            const localVarPath = `/Order/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdPut: async (orderId: string, orderDTO: OrderDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('orderOrderIdPut', 'orderId', orderId)
            // verify required parameter 'orderDTO' is not null or undefined
            assertParamExists('orderOrderIdPut', 'orderDTO', orderDTO)
            const localVarPath = `/Order/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderPost: async (orderDTO: OrderDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderDTO' is not null or undefined
            assertParamExists('orderPost', 'orderDTO', orderDTO)
            const localVarPath = `/Order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderGetDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderOrderIdGet(orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderGetDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderOrderIdGet(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} orderId 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderOrderIdPut(orderId: string, orderDTO: OrderDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderOrderIdPut(orderId, orderDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderPost(orderDTO: OrderDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderPost(orderDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderGet(options?: any): AxiosPromise<OrderGetDTO> {
            return localVarFp.orderGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdGet(orderId: string, options?: any): AxiosPromise<OrderGetDTO> {
            return localVarFp.orderOrderIdGet(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orderId 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderOrderIdPut(orderId: string, orderDTO: OrderDTO, options?: any): AxiosPromise<void> {
            return localVarFp.orderOrderIdPut(orderId, orderDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderPost(orderDTO: OrderDTO, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.orderPost(orderDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderGet(options?: any) {
        return OrderApiFp(this.configuration).orderGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderOrderIdGet(orderId: string, options?: any) {
        return OrderApiFp(this.configuration).orderOrderIdGet(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orderId 
     * @param {OrderDTO} orderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderOrderIdPut(orderId: string, orderDTO: OrderDTO, options?: any) {
        return OrderApiFp(this.configuration).orderOrderIdPut(orderId, orderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrderDTO} orderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderPost(orderDTO: OrderDTO, options?: any) {
        return OrderApiFp(this.configuration).orderPost(orderDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserAdminsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/User/UserAdmins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserIdDelete: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userUserIdDelete', 'userId', userId)
            const localVarPath = `/User/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserIdGet: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userUserIdGet', 'userId', userId)
            const localVarPath = `/User/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserIdPut: async (userId: string, userDTO: UserDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userUserIdPut', 'userId', userId)
            // verify required parameter 'userDTO' is not null or undefined
            assertParamExists('userUserIdPut', 'userDTO', userDTO)
            const localVarPath = `/User/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsersGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/User/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUserAdminsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUserAdminsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUserIdDelete(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUserIdDelete(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUserIdGet(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUserIdGet(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUserIdPut(userId: string, userDTO: UserDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUserIdPut(userId, userDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUsersGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUsersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserAdminsGet(options?: any): AxiosPromise<AppUser> {
            return localVarFp.userUserAdminsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserIdDelete(userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.userUserIdDelete(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserIdGet(userId: string, options?: any): AxiosPromise<AppUser> {
            return localVarFp.userUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserIdPut(userId: string, userDTO: UserDTO, options?: any): AxiosPromise<void> {
            return localVarFp.userUserIdPut(userId, userDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsersGet(options?: any): AxiosPromise<AppUser> {
            return localVarFp.userUsersGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userUserAdminsGet(options?: any) {
        return UserApiFp(this.configuration).userUserAdminsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userUserIdDelete(userId: string, options?: any) {
        return UserApiFp(this.configuration).userUserIdDelete(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userUserIdGet(userId: string, options?: any) {
        return UserApiFp(this.configuration).userUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {UserDTO} userDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userUserIdPut(userId: string, userDTO: UserDTO, options?: any) {
        return UserApiFp(this.configuration).userUserIdPut(userId, userDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userUsersGet(options?: any) {
        return UserApiFp(this.configuration).userUsersGet(options).then((request) => request(this.axios, this.basePath));
    }
}


